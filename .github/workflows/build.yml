name: 'Complete Build and Release'

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0.0
  workflow_dispatch: # Allow manual triggering

# This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.

permissions:
  contents: write

jobs:
  publish-tauri-macos-universal:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # for Universal macOS builds (arm64 and x86_64)
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install frontend dependencies
        run: yarn install # change this to npm, pnpm or bun depending on which one you use.

      - name: import Apple Developer Certificate
        # Prevents keychain from locking automatically for 3600 seconds.
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: verify certificate
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported."

      - name: build and publish
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
        with:
          tagName: v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

  publish-tauri-linux-windows:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: install frontend dependencies
        run: yarn install # change this to npm, pnpm or bun depending on which one you use.

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

  rename-release-assets:
    needs: [publish-tauri-linux-windows, publish-tauri-macos-universal]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          type -p gh > /dev/null || (\
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
            && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
            && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
            && sudo apt update \
            && sudo apt install gh -y \
          )

      - name: Get release tag name
        id: extract_tag
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAG_NAME="${GITHUB_REF#refs/tags/}"
            echo "Triggered by tag: $TAG_NAME"
          else
            echo "Not triggered by tag, fetching latest release tag..."
            TAG_NAME=$(gh release list --limit 1 --json tagName -q '.[0].tagName')
            if [[ -z "$TAG_NAME" ]]; then
              echo "Error: Could not find the latest release tag."
              exit 1
            fi
            echo "Latest release tag: $TAG_NAME"
          fi
          echo "tag=$TAG_NAME" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download release assets
        run: |
          mkdir -p release-assets
          echo "Downloading assets for release tag: ${{ steps.extract_tag.outputs.tag }}"
          gh release download "${{ steps.extract_tag.outputs.tag }}" --dir release-assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Rename assets to stable names
        run: |
          cd release-assets

          mv GPTree-*.rpm GPTree-linux.rpm || true
          mv GPTree_*_amd64.deb GPTree-linux.deb || true
          mv GPTree_*_amd64.AppImage GPTree-linux.AppImage || true

          mv GPTree_*_x64-setup.exe GPTree-windows.exe || true
          mv GPTree_*_x64_en-US.msi GPTree-windows.msi || true

          mv GPTree_*_universal.dmg GPTree-mac-universal.dmg || true
          mv GPTree_universal.app.tar.gz GPTree-mac-universal.app.tar.gz || true

          ls -lh

      - name: Upload renamed files to GitHub release
        run: |
          gh release upload "${{ steps.extract_tag.outputs.tag }}" \
            release-assets/GPTree-linux.rpm \
            release-assets/GPTree-linux.deb \
            release-assets/GPTree-linux.AppImage \
            release-assets/GPTree-windows.exe \
            release-assets/GPTree-windows.msi \
            release-assets/GPTree-mac-universal.dmg \
            release-assets/GPTree-mac-universal.app.tar.gz \
            --clobber
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Remove all non-renamed assets from release
        run: |
          tag=${{ steps.extract_tag.outputs.tag }}

          # List of assets we want to keep (exactly named)
          keep_assets=(
            GPTree-linux.deb
            GPTree-linux.rpm
            GPTree-linux.AppImage
            GPTree-mac-universal.dmg
            GPTree-mac-universal.app.tar.gz
            GPTree-windows.exe
            GPTree-windows.msi
          )

          # Get all current assets for the release
          all_assets=$(gh release view "$tag" --json assets -q '.assets[].name')

          for asset in $all_assets; do
            if printf '%s\n' "${keep_assets[@]}" | grep -qx "$asset"; then
              echo "‚úÖ Keeping $asset"
            else
              echo "üóëÔ∏è Deleting $asset from release $tag..."
              gh release delete-asset "$tag" "$asset" --yes || true
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
